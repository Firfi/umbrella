/**
 * Generated by @thi.ng/wasm-api-bindgen at 2023-03-26T00:16:14.510Z
 * DO NOT EDIT!
 */

// @ts-ignore possibly includes unused imports
import { Pointer, WasmStringPtr, type MemorySlice, type WasmTypeBase, type WasmTypeConstructor } from "@thi.ng/wasm-api";

export interface Task extends WasmTypeBase {
	state: TaskState;
	body: WasmStringPtr;
	/**
	 * Zig type: `u32`
	 */
	dateCreated: number;
	/**
	 * Zig type: `u32`
	 */
	dateDone: number;
}

export const $Task: WasmTypeConstructor<Task> = (mem) => ({
	get align() {
		return 4;
	},
	get size() {
		return 16;
	},
	instanceArray(base, num) {
		const items: Task[] = [];
		for (; num --> 0; base += 16) items.push(this.instance(base));
		return items;
	},
	instance: (base) => {
		let $body: WasmStringPtr | null = null;
		return {
			get __base() {
				return base;
			},
			get __bytes() {
				return mem.u8.subarray(base, base + 16);
			},
			get state(): TaskState {
				return mem.i32[base >>> 2];
			},
			set state(x: TaskState) {
				mem.i32[base >>> 2] = x;
			},
			get body(): WasmStringPtr {
				return $body || ($body = new WasmStringPtr(mem, (base + 4), true));
			},
			get dateCreated(): number {
				return mem.u32[(base + 8) >>> 2];
			},
			set dateCreated(x: number) {
				mem.u32[(base + 8) >>> 2] = x;
			},
			get dateDone(): number {
				return mem.u32[(base + 12) >>> 2];
			},
			set dateDone(x: number) {
				mem.u32[(base + 12) >>> 2] = x;
			},
		};
	}
});

export enum TaskState {
	OPEN,
	DONE,
}
